@page "/reports"
@using SAD_Final_Prototype.ViewModels
@using SAD_Final_Prototype.Models
@using SAD_Final_Prototype.Code

<h3>Reports</h3>

Work in progress...

@*
<h4>Sales by Date</h4>
<input type="date" @bind="startDate" />
<input type="date" @bind="endDate" />
<button @onclick="GenerateSalesByDateReport">Generate Report</button>

@if (salesByDateReport != null && salesByDateReport.Any())
{
    <ul>
        @foreach (var sale in salesByDateReport)
        {
            <li>@sale.CustomerName rented @sale.EquipmentName on @sale.RentalDate for @sale.TotalCost</li>
        }
    </ul>
}
else
{
    <p>No sales found for the selected date range.</p>
}

<h4>Sales by Customer</h4>
<select @bind="selectedCustomerId">
    @foreach (var customer in customers)
    {
        <option value="@customer.CustomerId">@customer.FirstName @customer.LastName</option>
    }
</select>
<button @onclick="GenerateSalesByCustomerReport">Generate Report</button>

@if (salesByCustomerReport != null && salesByCustomerReport.Any())
{
    <ul>
        @foreach (var sale in salesByCustomerReport)
        {
            <li>@sale.EquipmentName rented on @sale.RentalDate for @sale.TotalCost</li>
        }
    </ul>
}
else
{
    <p>No sales found for the selected customer.</p>
}

<!-- List Items by Category -->
<h4>Items by Category</h4>
<select @bind="selectedCategoryId">
    @foreach (var category in categories)
    {
        <option value="@category.CategoryId">@category.Description</option>
    }
</select>
<button @onclick="GenerateItemsByCategoryReport">Generate Report</button>

@if (itemsByCategoryReport != null && itemsByCategoryReport.Any())
{
    <ul>
        @foreach (var item in itemsByCategoryReport)
        {
            <li>@item.Name - @item.Description - @item.DailyRentalCost.ToString("C")</li>
        }
    </ul>
}
else
{
    <p>No items found for the selected category.</p>
}

@code {
    private DateTime startDate = DateTime.Now;
    private DateTime endDate = DateTime.Now;
    private int selectedCustomerId;
    private int selectedCategoryId;

    private List<SaleReportItem> salesByDateReport = new List<SaleReportItem>();
    private List<SaleReportItem> salesByCustomerReport = new List<SaleReportItem>();
    private List<Equipment> itemsByCategoryReport = new List<Equipment>();

    private List<Customer> customers = new List<Customer>(); // Define customers list
    private List<Category> categories = new List<Category>(); // Define categories list

    private DatabaseContext _dbContext;

    protected override async Task OnInitializedAsync()
    {
        _dbContext = new DatabaseContext();
        customers = await LoadCustomersAsync();
        categories = await LoadCategoriesAsync();
    }

    private async Task GenerateSalesByDateReport()
    {
        salesByDateReport = await GenerateSalesByDateAsync(startDate, endDate);
    }

    private async Task GenerateSalesByCustomerReport()
    {
        salesByCustomerReport = await GenerateSalesByCustomerAsync(selectedCustomerId);
    }

    private async Task GenerateItemsByCategoryReport()
    {
        itemsByCategoryReport = await LoadItemsByCategoryAsync(selectedCategoryId);
    }

    private async Task<List<SaleReportItem>> GenerateSalesByDateAsync(DateTime startDate, DateTime endDate)
    {
        var rentals = await _dbContext.GetFileteredAsync<Rental>(r => r.RentalDate >= startDate && r.RentalDate <= endDate);
        var salesReport = from rental in rentals
                          join equipment in itemsByCategoryReport on rental.EquipmentId equals equipment.EquipmentId
                          select new SaleReportItem
                          {
                              CustomerName = customers.First(c => c.CustomerId == rental.CustomerId).FirstName + " " + customers.First(c => c.CustomerId == rental.CustomerId).LastName,
                              EquipmentName = equipment.Name,
                              RentalDate = rental.RentalDate,
                              TotalCost = rental.RentalCost
                          };

        return salesReport.ToList();
    }

    private async Task<List<SaleReportItem>> GenerateSalesByCustomerAsync(int customerId)
    {
        var rentals = await _dbContext.GetFileteredAsync<Rental>(r => r.CustomerId == customerId);
        var salesReport = from rental in rentals
                          join equipment in itemsByCategoryReport on rental.EquipmentId equals equipment.EquipmentId
                          select new SaleReportItem
                          {
                              CustomerName = customers.First(c => c.CustomerId == customerId).FirstName + " " + customers.First(c => c.CustomerId == customerId).LastName,
                              EquipmentName = equipment.Name,
                              RentalDate = rental.RentalDate,
                              TotalCost = rental.RentalCost
                          };

        return salesReport.ToList();
    }

    private async Task<List<Equipment>> LoadItemsByCategoryAsync(int categoryId)
    {
        var equipmentList = await _dbContext.GetFileteredAsync<Equipment>(e => e.CategoryId == categoryId);
        return equipmentList.ToList();
    }

    private async Task<List<Customer>> LoadCustomersAsync()
    {
        return (await _dbContext.GetAllAsync<Customer>()).ToList();
    }

    private async Task<List<Category>> LoadCategoriesAsync()
    {
        return (await _dbContext.GetAllAsync<Category>()).ToList();
    }

    private class SaleReportItem
    {
        public string CustomerName { get; set; } = string.Empty;
        public string EquipmentName { get; set; } = string.Empty;
        public DateTime RentalDate { get; set; }
        public decimal TotalCost { get; set; }
    }
}
*@